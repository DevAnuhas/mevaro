generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?   @default(false)
  role          String
  accounts      Account[]
  downloads     Download[]
  favorites     Favorite[]
  materials     Material[]
  sessions      Session[]
  views         View[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Material {
  id            String                 @id @default(cuid())
  title         String
  description   String?
  fileUrl       String
  fileType      String
  fileSize      Int
  category      Category
  keywords      String[]
  status        MaterialStatus         @default(PENDING)
  uploaderId    String
  viewCount     Int                    @default(0)
  downloadCount Int                    @default(0)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  approvedAt    DateTime?
  embedding     Unsupported("vector")?
  downloads     Download[]
  favorites     Favorite[]
  uploader      User                   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  views         View[]

  @@index([status])
  @@index([category])
  @@index([uploaderId])
  @@map("material")
}

model Download {
  id           String   @id @default(cuid())
  userId       String
  materialId   String
  downloadedAt DateTime @default(now())
  material     Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([materialId])
  @@map("download")
}

model View {
  id          String   @id @default(cuid())
  userId      String?
  materialId  String
  fingerprint String?
  viewedAt    DateTime @default(now())
  material    Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([materialId])
  @@index([materialId, userId])
  @@index([materialId, fingerprint])
  @@map("view")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  materialId String
  createdAt  DateTime @default(now())
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId])
  @@index([userId])
  @@map("favorite")
}

enum Category {
  SCIENCE
  TECHNOLOGY
  ENGINEERING
  ARTS
  MATHEMATICS
}

enum MaterialStatus {
  PENDING
  APPROVED
  REJECTED
}
